{%- assign headerSnippetPath = 'header-index' -%}
{%- assign wfPage = '687e7b1fe546230171c3f80b' -%}
{%- assign bodyClasses = '' -%}
<div class="page-wrapper home">
	{%- render 'global-styles' -%}
	{%- render 'navbar' -%}
	<main class="main-wrapper">
		<header class="section_product-header7">
			<div class="padding-global">
				<div class="container-large">
					<div class="padding-section-medium">
						<div class="cart-container padding-global">
							<div class="cart-header">
								<h3 class="heading-style-h2 cart-title">Total de itens: {{ cart.item_count }}</h3>
							</div>

							<div class="cart-content">
								{% if cart.item_count > 0 %}
									<div class="cart-items">
										{% for item in cart.items %}
											<div
												class="cart-item"
												data-cart-item
												data-item-id="{{ item.id }}">
												<div class="cart-item-image">
													<a href="{{ item.url }}">
														<img
															src="{{ item.image | img_url: '100x' }}"
															alt="{{ item.title | escape }}"
															width="60"
															height="60">
													</a>
												</div>
												<div class="cart-item-details">
													<a
														href="{{ item.url }}"
														class="cart-item-title">
														{{- item.product.title -}}
													</a>
													<div class="cart-item-price">
														<span class="price">{{ item.final_price | money }}</span>
													</div>
													<div class="cart-item-quantity">
														<button
															type="button"
															class="quantity-btn quantity-decrease"
															data-cart-quantity-decrease>
															−
														</button>
														<input
															type="number"
															name="updates[]"
															value="{{ item.quantity }}"
															min="0"
															class="quantity-display"
															data-cart-quantity-input>
														<button
															type="button"
															class="quantity-btn quantity-increase"
															data-cart-quantity-increase>
															+
														</button>
														<button
															type="button"
															class="remove-item-btn"
															data-cart-item-remove
															aria-label="Remove item">
															<svg
																width="16"
																height="16"
																viewBox="0 0 16 16"
																fill="none"
																xmlns="http://www.w3.org/2000/svg">
																<path d="M2 2L14 14M14 2L2 14" stroke="currentColor" stroke-width="1.5"></path>
															</svg>
														</button>
													</div>
													<div
														class="cart-item-total"
														data-item-total>
														{{ item.final_line_price | money }}
													</div>
												</div>
											</div>
										{% endfor %}
									</div>

									<div class="cart-footer">
										<div class="cart-total">
											<span>Total estimado</span>
											<span
												class="total-amount"
												data-cart-subtotal>
												{{- cart.total_price | money }} BRL</span
											>
										</div>
										<div class="cart-note">Tributos e frete calculados no checkout.</div>
										<a
											href="/checkout"
											class="cart-checkout-btn">
											Finalizar a compra
										</a>
									</div>
								{% else %}
									<div class="cart-empty">
										<p>Seu carrinho está vazio.</p>
										<a
											href="/collections/all"
											class="cart-checkout-btn">
											Continuar comprando
										</a>
									</div>
								{% endif %}
							</div>
						</div>
					</div>
				</div>
			</div>
		</header>
	</main>

	{%- render 'footer' -%}
</div>

<!-- jQuery and CartJS Libraries - Loaded synchronously for proper initialization order -->
<script
	src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=687b9decde4053855982b5b1"
	type="text/javascript"
	integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
	crossorigin="anonymous"
	defer></script>
<script
	src="{{ 'cart.js' | asset_url }}"
	type="text/javascript"
	defer></script>
<script
	src="{{ 'webflow.js' | asset_url }}"
	type="text/javascript"
	defer></script>

<style>
	/* Cart Styles - Matching Sidebar Design */
	.cart-container {
		max-width: 800px;
		margin: 0 auto;
		padding: 2rem 0;
		background-color: #f8f8f8;
		border-radius: 8px;
		overflow: hidden;
	}

	.cart-header {
		padding: 20px;
		border-bottom: 1px solid #e0e0e0;
		background-color: #fff;
	}

	.cart-title {
		margin: 0;
		font-size: 18px;
		font-weight: 600;
		color: var(--color-scheme-1--color);
	}

	.cart-content {
		padding: 20px;
		background-color: #f8f8f8;
	}

	.cart-items {
		margin-bottom: 20px;
	}

	.cart-item {
		display: flex;
		gap: 15px;
		padding: 15px;
		border-bottom: 1px solid #e0e0e0;
		background-color: #fff;
		margin-bottom: 10px;
		border-radius: 8px;
	}

	.cart-item:last-child {
		border-bottom: none;
	}

	.cart-item-image img {
		border-radius: 8px;
		object-fit: cover;
	}

	.cart-item-details {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	.cart-item-title {
		font-weight: 600;
		font-size: 16px;
		color: var(--color-scheme-1--color);
		text-decoration: none;
	}

	.cart-item-title:hover {
		color: var(--color-scheme-1--color);
		opacity: 0.8;
	}

	.cart-item-price {
		font-size: 14px;
		color: var(--color-scheme-1--color);
	}

	.cart-item-quantity {
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.quantity-btn {
		width: 30px;
		height: 30px;
		border: 1px solid var(--color-scheme-1--color);
		background: #fff;
		border-radius: 4px;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 16px;
		font-weight: bold;
		color: var(--color-scheme-1--color);
		transition: all 0.2s;
	}

	.quantity-btn:hover {
		background: var(--color-scheme-1--color);
		color: #fff;
	}

	.quantity-display {
		min-width: 30px;
		text-align: center;
		font-weight: 600;
		color: var(--color-scheme-1--color);
		border: 1px solid var(--color-scheme-1--color);
		border-radius: 4px;
		padding: 5px;
		background: #fff;
	}

	.remove-item-btn {
		background: none;
		border: none;
		cursor: pointer;
		padding: 5px;
		color: var(--color-scheme-1--color);
		transition: color 0.2s;
	}

	.remove-item-btn:hover {
		color: var(--color-scheme-1--color);
		opacity: 0.8;
	}

	.cart-item-total {
		font-weight: 600;
		font-size: 14px;
		color: var(--color-scheme-1--color);
	}

	.cart-footer {
		padding: 20px;
		border-top: 1px solid #e0e0e0;
		background-color: #fff;
		border-radius: 8px;
	}

	.cart-total {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 10px;
		font-weight: 600;
		font-size: 16px;
		color: var(--color-scheme-1--color);
	}

	.total-amount {
		font-size: 18px;
		color: var(--color-scheme-1--color);
	}

	.cart-note {
		font-size: 12px;
		color: var(--color-scheme-1--color);
		margin-bottom: 20px;
		text-align: center;
	}

	.cart-checkout-btn {
		display: block;
		width: 100%;
		padding: 15px;
		background-color: var(--color-scheme-1--color);
		color: #fff;
		text-align: center;
		text-decoration: none;
		border-radius: 30px;
		font-weight: 600;
		transition: background-color 0.2s;
	}

	.cart-checkout-btn:hover {
		background-color: var(--color-scheme-1--color);
		opacity: 0.8;
		color: #fff;
		text-decoration: none;
	}

	.cart-empty {
		text-align: center;
		padding: 40px 20px;
		color: var(--color-scheme-1--color);
	}

	.cart-empty p {
		margin-bottom: 20px;
		font-size: 16px;
	}

	/* Loading state for item removal */
	.cart-item.removing {
		opacity: 0.5;
		pointer-events: none;
	}

	.cart-item.removing .remove-item-btn {
		background: var(--color-scheme-1--color);
		color: #fff;
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.cart-container {
			margin: 0 1rem;
		}

		.cart-item {
			flex-direction: column;
			text-align: center;
		}

		.cart-item-quantity {
			justify-content: center;
		}
	}
</style>

<script>
  // Wait for both jQuery and CartJS to be available
  function initializeCart() {
    console.log('Initializing cart...');
    console.log('jQuery available:', typeof $ !== 'undefined');
    console.log('CartJS available:', typeof CartJS !== 'undefined');
    
    if (typeof $ === 'undefined' || typeof CartJS === 'undefined') {
      console.log('Waiting for libraries to load...');
      setTimeout(initializeCart, 200);
      return;
    }

    // Initialize CartJS with current cart data
    CartJS.init({{ cart | json }});

    function formatMoney(cents) {
      return (cents / 100).toLocaleString('pt-BR', {
        style: 'currency',
        currency: '{{ shop.currency }}'
      });
    }

    function updateItemTotal(itemElement, price, quantity) {
      const totalElement = itemElement.find('[data-item-total]');
      if (totalElement.length) {
        const total = price * quantity;
        totalElement.text(formatMoney(total));
      }
    }

    function updateCartDisplay(cart) {
      // Update cart title
      const cartTitle = $('.cart-title');
      if (cartTitle.length) {
        cartTitle.text(`Total de itens: ${cart.item_count}`);
      }

      // Update subtotal
      const subtotalElement = $('[data-cart-subtotal]');
      if (subtotalElement.length) {
        subtotalElement.text(formatMoney(cart.total_price) + ' BRL');
      }

      // Update individual item totals and prices
      cart.items.forEach(function(item) {
        const itemElement = $('[data-item-id="' + item.id + '"]');
        if (itemElement.length) {
          const priceElement = itemElement.find('.price');
          if (priceElement.length) {
            priceElement.text(formatMoney(item.final_price));
          }
          updateItemTotal(itemElement, item.final_price, item.quantity);
        }
      });

      // Remove items that are no longer in the cart
      $('[data-item-id]').each(function() {
        const itemId = $(this).data('item-id');
        const itemExists = cart.items.some(function(item) {
          return item.id === itemId;
        });
        
        if (!itemExists) {
          $(this).fadeOut(300, function() {
            $(this).remove();
          });
        }
      });

      // Update navbar cart count
      const cartQuantityText = $('.cart-quantity-text');
      if (cartQuantityText.length) {
        cartQuantityText.text(cart.item_count);
        if (cart.item_count === 0) {
          cartQuantityText.hide();
        } else {
          cartQuantityText.show();
        }
      }

      // If cart is empty, show empty cart message
      if (cart.item_count === 0) {
        const cartContent = $('.cart-content');
        if (cartContent.length) {
          cartContent.html(`
            <div class='cart-empty'>
              <p>Seu carrinho está vazio.</p>
              <a href='/collections/all' class='cart-checkout-btn'>Continuar comprando</a>
            </div>
          `);
        }
      }
    }

    // Handle quantity changes
    $(document).on('change', '[data-cart-quantity-input]', function() {
      const itemElement = $(this).closest('[data-item-id]');
      const itemId = itemElement.data('item-id');
      const quantity = parseInt($(this).val());
      if (quantity >= 0) {
        CartJS.updateItem(itemId, quantity);
      }
    });

    // Handle quantity increase/decrease buttons
    $(document).on('click', '[data-cart-quantity-decrease]', function(e) {
      console.log('Decrease button clicked');
      e.preventDefault();
      const input = $(this).siblings('[data-cart-quantity-input]');
      const newValue = Math.max(0, parseInt(input.val()) - 1);
      input.val(newValue);
      const itemId = $(this).closest('[data-item-id]').data('item-id');
      console.log('Updating item ID:', itemId, 'to quantity:', newValue);
      CartJS.updateItem(itemId, newValue);
    });

    $(document).on('click', '[data-cart-quantity-increase]', function(e) {
      console.log('Increase button clicked');
      e.preventDefault();
      const input = $(this).siblings('[data-cart-quantity-input]');
      const newValue = parseInt(input.val()) + 1;
      input.val(newValue);
      const itemId = $(this).closest('[data-item-id]').data('item-id');
      console.log('Updating item ID:', itemId, 'to quantity:', newValue);
      CartJS.updateItem(itemId, newValue);
    });

    // Handle remove item buttons
    $(document).on('click', '[data-cart-item-remove]', function(e) {
      console.log('Remove button clicked');
      e.preventDefault();
      const itemElement = $(this).closest('[data-item-id]');
      const itemId = itemElement.data('item-id');
      console.log('Removing item ID:', itemId);
      
      // Show loading state
      itemElement.addClass('removing');
      
      CartJS.updateItem(itemId, 0);
    });

    // Listen for cart updates from CartJS
    CartJS.on('cart.afterUpdate', function(cart) {
      updateCartDisplay(cart);
    });

    // Initial cart display update
    updateCartDisplay(CartJS.cart);
  }

  // Start initialization when DOM is ready
  $(document).ready(function() {
    initializeCart();
  });
</script>
